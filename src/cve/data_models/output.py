# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import typing

from pydantic import BaseModel
from pydantic import model_validator

from .input import AgentMorpheusEngineInput


class AgentIntermediateStep(BaseModel):
    """
    Represents info for an intermediate step taken by an agent.
    """
    tool_name: str
    action_log: str
    tool_input: str | dict
    tool_output: typing.Any


class ChecklistItemOutput(BaseModel):
    """
    Input, response, and intermediate steps for a single checklist item provided to the LLM agent.
    """
    input: str
    response: str
    intermediate_steps: list[AgentIntermediateStep] | None = None


class JustificationOutput(BaseModel):
    """
    Final justification for the vulnerability.

    - label: a categorical justification label classifying the status of an image against a given vulnerability, e.g.
      code_not_present, code_not_reachable, false_positive.
    - reason: a human-readable explanation for why justification label was selected.
    - status: a ternary status (TRUE, FALSE, OR UNKNOWN) that indicates whether the image can be exploited for a given
      vulnerability. Determined based on a mapping from the justification label.
    """
    label: str  # TODO: convert to typing.Literal after completing issue #115
    reason: str
    status: typing.Literal["TRUE", "FALSE", "UNKNOWN"]


class AgentMorpheusEngineOutput(BaseModel):
    """
    Contains all output generated by the main Agent Morpheus LLM Engine for a given vulnerability.

    - vuln_id: the ID of the vulnerability being processed by the LLM engine.
    - checklist: a list of ChecklistItemOutput objects, each containing an input and a response from the LLM agent.
    - summary: a short summary of the checklist inputs and responses, generated by an LLM.
    - justification: a JustificationOutput object containing details of the model's justification decision.
    """
    vuln_id: str
    checklist: list[ChecklistItemOutput]
    summary: str
    justification: JustificationOutput


class AgentMorpheusOutput(AgentMorpheusEngineInput):
    """"
    The final output of the Agent Morpheus pipeline.
    Contains all fields in the AgentMorpheusEngineInput, plus the AgentMorpheusEngineOuput for each input vulnerability.
    """
    output: list[AgentMorpheusEngineOutput]

    @model_validator(mode="before")
    @classmethod
    def validate_not_none(cls, data: typing.Any) -> typing.Any:
        """Validate that no fields are None in the output data"""
        if isinstance(data, dict):
            for k, v in data.items():
                if v is None:
                    raise ValueError(f"{k} must not be None")
        return data
