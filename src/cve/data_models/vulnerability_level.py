# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import typing
from enum import Enum


class VulnerabilityLevel(Enum):
    """Vulnerability levels."""
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    NEGLIGIBLE = "negligible"

    @staticmethod
    def levels_to_str(vuln_levels: typing.Iterable["VulnerabilityLevel | str"]) -> typing.Generator[str, None, None]:

        for level in vuln_levels:
            if isinstance(level, VulnerabilityLevel):
                level_value = level.value
            elif isinstance(level, str):
                level_value = level.lower()
                if level_value in VulnerabilityLevel.__members__:
                    yield level_value
                else:
                    raise ValueError(f"Invalid vulnerability level: {level}")
            else:
                raise ValueError(f"Invalid vulnerability level: {level}")

            yield level_value
