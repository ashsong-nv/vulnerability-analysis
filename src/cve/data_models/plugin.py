# SPDX-FileCopyrightText: Copyright (c) 2024-2025, NVIDIA CORPORATION & AFFILIATES. All rights reserved.
# SPDX-License-Identifier: Apache-2.0
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


import typing
from abc import ABC
from abc import abstractmethod
from pydoc import locate

from morpheus.config import Config
from morpheus.pipeline.linear_pipeline import LinearPipeline

from ..data_models.config import RunConfig

_T = typing.TypeVar('_T', bound='PluginSchema')


class PluginSchema(ABC):

    @classmethod
    def locate(cls: type[_T], plugin_name: str) -> _T:
        '''Locate input plugin'''
        pluginClass: type | None = locate(plugin_name)

        if not pluginClass:
            raise ValueError(f"Plugin not found: {plugin_name}")
        if not issubclass(pluginClass, cls):
            raise ValueError("Plugin object must be a subclass of {cls}")

        return pluginClass()


class InputPluginSchema(PluginSchema):

    @abstractmethod
    def build_input(self, pipe: LinearPipeline, config: Config, run_config: RunConfig):
        # add the plugin specific input building logic here
        pass


class OutputPluginSchema(PluginSchema):

    @abstractmethod
    def build_output(self, pipe: LinearPipeline, config: Config, run_config: RunConfig):
        # add the plugin specific output building logic here
        pass
